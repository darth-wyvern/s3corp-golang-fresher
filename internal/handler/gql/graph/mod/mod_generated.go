// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package mod

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateProductInput struct {
	Title       string     `json:"title"`
	Description *string    `json:"description"`
	Price       float64    `json:"price"`
	Quantity    int        `json:"quantity"`
	IsActive    ActiveType `json:"isActive"`
	UserID      int        `json:"userID"`
}

type GetProductsInput struct {
	ID         *int             `json:"id"`
	Title      *string          `json:"title"`
	PriceRange *PriceRange      `json:"priceRange"`
	IsActive   *bool            `json:"isActive"`
	UserID     *int             `json:"userID"`
	OrderBy    *OrderBy         `json:"orderBy"`
	Pagination *PaginationInput `json:"pagination"`
}

type GetProductsOutput struct {
	Products   []*Product  `json:"products"`
	Pagination *Pagination `json:"pagination"`
}

type OrderBy struct {
	Title     *string `json:"title"`
	Price     *string `json:"price"`
	Quantity  *string `json:"quantity"`
	CreatedAt *string `json:"createdAt"`
}

type Pagination struct {
	CurrentPage *int   `json:"currentPage"`
	Limit       *int   `json:"limit"`
	TotalCount  *int64 `json:"totalCount"`
}

type PaginationInput struct {
	Page  *int `json:"page"`
	Limit *int `json:"limit"`
}

type PriceRange struct {
	MinPrice float64 `json:"minPrice"`
	MaxPrice float64 `json:"maxPrice"`
}

type Product struct {
	ID          int       `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Price       float64   `json:"price"`
	Quantity    int       `json:"quantity"`
	IsActive    bool      `json:"isActive"`
	UserID      int       `json:"userID"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type ActiveType string

const (
	ActiveTypeYes ActiveType = "YES"
	ActiveTypeNo  ActiveType = "NO"
)

var AllActiveType = []ActiveType{
	ActiveTypeYes,
	ActiveTypeNo,
}

func (e ActiveType) IsValid() bool {
	switch e {
	case ActiveTypeYes, ActiveTypeNo:
		return true
	}
	return false
}

func (e ActiveType) String() string {
	return string(e)
}

func (e *ActiveType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActiveType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActiveType", str)
	}
	return nil
}

func (e ActiveType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
